#include <stdio.h>
#include <stdlib.h>

struct node
{
    struct node *next;
    int data;
};


void linkedlistTraversal(struct node *ptr){
    while(ptr!=NULL){
        printf("Element : %d\n",ptr->data);
        ptr=ptr->next;
    }

}


int isFull(struct node *n)
{
    struct node *c = (struct node *)malloc(sizeof(struct node));
    if (c == NULL)
    {
        return 1;
    }
    return 0;
}

int isEmpty(struct node *f)
{
    if (f == NULL)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int deq(struct node *s, struct node **f, struct node **b)
{
    int val = -1;
    struct node *ptr = *f;
    if (ptr==NULL)
    {
        printf("The stack went into underflow\n");
        return -1;
    }
    else
    {
        *f = (*f)->next;
        val = ptr->data;
        free(ptr);
        return val;
    }
    //
}

void enq(struct node *s, struct node **b, struct node **f, int val)
{
    // struct node* b=(struct node*)malloc(sizeof(struct node));
    // struct node* f=(struct node*)malloc(sizeof(struct node));
    struct node *a = (struct node *)malloc(sizeof(struct node));
    if (a==NULL)
    {
        printf("The queue is full\n");
    }
    else
    {
        a->data = val;
        a->next = NULL;
        if (*f == NULL)
        {
            *f = *b = a;
            
        }
        else
        {
            (*b)->next = a;
            *b = a;
        }
    }
}

int main(int argc, char const *argv[])
{
    struct node *s;
    s = (struct node *)malloc(sizeof(struct node));
    struct node *f = NULL;
    struct node *b = NULL;
    // f=b=NULL;
    enq(s, &f, &b, 18);
    enq(s, &f, &b, 27);
    printf("The element removed is : %d\n",deq(s, &f, &b));
    printf("The element removed is : %d\n",deq(s, &f, &b));
    //linkedlistTraversal(s);


    /* code */
    return 0;
}
