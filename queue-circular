#include <stdio.h>
#include <stdlib.h>

struct queue{
    int size;
    int fInd;
    int bInd;
    int *arr;
};

int isFull(struct queue *qu){
    if((qu->bInd+1)%qu->size==qu->fInd ){
        return 1;
    }
    return 0;
}

int isEmpty(struct queue *qu){
    if((qu->fInd+1)%qu->size==0){
        return 1;
    }
    else{
        return 0;
    }
}

void enqueue(struct queue *q, int val){
    if(isFull(q)){
        printf("Queue overflow. Cannot insert any more element\n");
    }
    else{
        q->bInd=(q->bInd+1)%q->size;
        q->arr[q->bInd]=val;
    }
}

int dequeue(struct queue *q){
    if(isEmpty(q)){
        printf("Queue underflow. Cannot remove elemnets\n");
        return -1;
    }
    else{
    int a=-1;
    q->fInd=(q->fInd+1)%q->size;
    a=q->arr[q->fInd];
    return a;

    }
    

}

int main(int argc, char const *argv[])
{
    struct queue *q=(struct queue*)malloc(sizeof(struct queue));
    q->size=4;
    q->fInd=0;
    q->bInd=0;
    q->arr=(int*)malloc(q->size*sizeof(int));
    //printf("The removed value is: %d\n",dequeue(q));
    enqueue(q,17);
    enqueue(q,18);
    //printf("The removed value is: %d\n",dequeue(q));
    enqueue(q,89);
    enqueue(q,67);
    printf("The removed value is: %d\n",dequeue(q));
    printf("The removed value is: %d\n",dequeue(q));
    printf("The removed value is: %d\n",dequeue(q));
    printf("The removed value is: %d\n",dequeue(q));
   // printf("The removed value is: %d\n",dequeue(q));
   if(isFull(q)){
    printf("The queue is full\n");//--------------------Even after removing every element it outputs that queue is full.
   }
   else{
    printf("The queue is not full\n");
   }
   printf("The removed value is: %d\n",dequeue(q));


    /* code */
    return 0;
}
